/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "xparameters.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xil_exception.h"
#include "xdebug.h"

#include "xintc.h"
#include "xil_cache.h"
#include "sleep.h"
#include "can_drv.h"
#include "xgpio.h"


/*
 * AXI DEVICE DEFINE
 * */
// INTC
#define INTC_ID        XPAR_MICROBLAZE_4_AXI_INTC_DEVICE_ID
// CAN Controller
#define CAN_0_BASEADDR XPAR_MB_FINN_CAN_CONTROLLER_S00_AXI_BASEADDR
#define CAN_0_INTR_ID XPAR_INTC_0_CAN_CONTROLLER_0_VEC_ID


/*
 * AXI DECIVE INSTANCE
 * */

static XIntc Intc;


/*
 * Structure
 * */
struct can_data_frame trans_frame;
struct can_data_frame recv_frame;

/**
 * Variables
 * */

# define BUFFER_SIZE 16
# define FINN_INPUT 40
# define FINN_OUTPUT 4
/*
 * FIFO
 * */

static void inline write_axis(volatile unsigned char *a)
{
    register char a0,  a1,  a2,  a3;
    register char a4,  a5,  a6,  a7;
    register char a8,  a9,  a10, a11;
    register char a12, a13, a14, a15;

    a3  = a[3];  a1  = a[1];  a2  = a[2];  a0  = a[0];
    a7  = a[7];  a5  = a[5];  a6  = a[6];  a4  = a[4];
    a11 = a[11]; a9  = a[9];  a10 = a[10]; a8  = a[8];
    a15 = a[15]; a13 = a[13]; a14 = a[14]; a12 = a[12];

    putfsl(a0,  0); putfsl(a1,  0); putfsl(a2,  0); putfsl(a3,  0);
    putfsl(a4,  0); putfsl(a5,  0); putfsl(a6,  0); putfsl(a7,  0);
    putfsl(a8,  0); putfsl(a9,  0); putfsl(a10, 0); putfsl(a11, 0);
    putfsl(a12, 0); putfsl(a13, 0); putfsl(a14, 0); putfsl(a15, 0);
}

/*
 * Read 16 32-bit words as efficiently as possible.
 */
static void inline read_axis(volatile unsigned char *a)
{
    register char a0,  a1,  a2,  a3;
    register char a4,  a5,  a6,  a7;
    register char a8,  a9,  a10, a11;
    register char a12, a13, a14, a15;

    getfsl(a0,  0); getfsl(a1,  0); getfsl(a2,  0); getfsl(a3,  0);
    getfsl(a4,  0); getfsl(a5,  0); getfsl(a6,  0); getfsl(a7,  0);
    getfsl(a8,  0); getfsl(a9,  0); getfsl(a10, 0); getfsl(a11, 0);
    getfsl(a12, 0); getfsl(a13, 0); getfsl(a14, 0); getfsl(a15, 0);

    a[3]  = a3;  a[1]  = a1;  a[2]  = a2;  a[0]  = a0;
    a[7]  = a7;  a[5]  = a5;  a[6]  = a6;  a[4]  = a4;
    a[11] = a11; a[9]  = a9;  a[10] = a10; a[8]  = a8;
    a[15] = a15; a[13] = a13; a[14] = a14; a[12] = a12;
}




/*
 * FUNCTION DECLARE
 * */

// IRQ handler

//void can_0_irq_handler(void *InstancePtr);

void intc_init(){
   print("Initialize interrupt controller \r\n");
   XIntc_Initialize(&Intc, INTC_ID);
}

void cache_init(){
	Xil_ICacheEnable();
	Xil_DCacheEnable();
}

void intc_setup(){
   print("Initialize interrupt setup \r\n");
   XIntc_Start(&Intc, XIN_REAL_MODE);	//start INTC controller
   // Interrupt instance begin

   //XIntc_Enable(&Intc,CAN_0_INTR_ID);
   // Interrupt instance end
    Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler)XIntc_InterruptHandler , &Intc);
	Xil_ExceptionEnable();
}

void can_device_init(){
	can_init(CAN_0_BASEADDR);
	//XIntc_Connect(&Intc, CAN_0_INTR_ID,(XInterruptHandler)can_0_irq_handler, NULL);
}



void device_init(){
	print("Initialize Device \r\n");
	intc_init();
	cache_init();

	can_device_init();
	intc_setup();
}

/*
 * Write 40 bytes to the FIFO
 */

static void inline write_axis_40(volatile int8_t *a)
{
   register int8_t a0, a1, a2, a3;
   register int8_t a4, a5, a6, a7;
   register int8_t a8, a9, a10, a11;
   register int8_t a12, a13, a14, a15;
   register int8_t a16, a17, a18, a19;
   register int8_t a20, a21, a22, a23;
   register int8_t a24, a25, a26, a27;
   register int8_t a28, a29, a30, a31;
   register int8_t a32, a33, a34, a35;
   register int8_t a36, a37, a38, a39;

   a3  = a[3];  a1  = a[1];  a2  = a[2];  a0  = a[0];
   a7  = a[7];  a5  = a[5];  a6  = a[6];  a4  = a[4];
   a11 = a[11]; a9  = a[9];  a10 = a[10]; a8  = a[8];
   a15 = a[15]; a13 = a[13]; a14 = a[14]; a12 = a[12];
   a19 = a[19]; a17 = a[17]; a18 = a[18]; a16 = a[16];
   a23 = a[23]; a21 = a[21]; a22 = a[22]; a20 = a[20];
   a27 = a[27]; a25 = a[25]; a26 = a[26]; a24 = a[24];
   a31 = a[31]; a29 = a[29]; a30 = a[30]; a28 = a[28];
   a35 = a[35]; a33 = a[33]; a34 = a[34]; a32 = a[32];
   a39 = a[39]; a37 = a[37]; a38 = a[38]; a36 = a[36];

   putfsl(a0,  1); putfsl(a1,  1); putfsl(a2,  1); putfsl(a3,  1);
   putfsl(a4,  1); putfsl(a5,  1); putfsl(a6,  1); putfsl(a7,  1);
   putfsl(a8,  1); putfsl(a9,  1); putfsl(a10, 1); putfsl(a11, 1);
   putfsl(a12, 1); putfsl(a13, 1); putfsl(a14, 1); putfsl(a15, 1);
   putfsl(a16, 1); putfsl(a17, 1); putfsl(a18, 1); putfsl(a19, 1);
   putfsl(a20, 1); putfsl(a21, 1); putfsl(a22, 1); putfsl(a23, 1);
   putfsl(a24, 1); putfsl(a25, 1); putfsl(a26, 1); putfsl(a27, 1);
   putfsl(a28, 1); putfsl(a29, 1); putfsl(a30, 1); putfsl(a31, 1);
   putfsl(a32, 1); putfsl(a33, 1); putfsl(a34, 1); putfsl(a35, 1);
   putfsl(a36, 1); putfsl(a37, 1); putfsl(a38, 1); putfsl(a39, 1);
}

///*
// * Read 4 bytes from the FIFO
// */
//
static void inline read_axis_4(volatile unsigned char *a)
{
   register char a0, a1, a2, a3;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1);

   a[3] = a3; a[1] = a1; a[2] = a2; a[0] = a0;
}

static void inline read_axis_4_u32(volatile uint32_t *a)
{
   register uint32_t a0, a1, a2, a3;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1);

   a[3] = a3; a[1] = a1; a[2] = a2; a[0] = a0;
}

static void inline read_axis_4_i32(volatile int32_t *a)
{
   register int32_t a0, a1, a2, a3;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1);

   a[3] = a3; a[1] = a1; a[2] = a2; a[0] = a0;
}

static void inline read_axis_8_u32(volatile uint32_t *a)
{
   register uint32_t a0, a1, a2, a3, a4, a5, a6, a7;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1);
   getfsl(a4, 1); getfsl(a5, 1); getfsl(a6, 1); getfsl(a7, 1);

   a[3]  = a3;  a[1]  = a1;  a[2]  = a2;  a[0]  = a0;
   a[7]  = a7;  a[5]  = a5;  a[6]  = a6;  a[4]  = a4;
}

static void inline read_axis_4_float(volatile float *a)
{
   register float a0, a1, a2, a3;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1);

   a[3] = a3; a[1] = a1; a[2] = a2; a[0] = a0;
}

static void inline read_axis_1_u32(volatile uint32_t *a)
{
   register uint32_t a0, a1, a2, a3;

   getfsl(a0, 1);

   a[0] = a0;
}

static void inline read_axis_5(volatile unsigned char *a)
{
   register char a0, a1, a2, a3, a4;

   getfsl(a0, 1); getfsl(a1, 1); getfsl(a2, 1); getfsl(a3, 1); getfsl(a4, 1);

   a[4] = a4 ;a[3] = a3; a[1] = a1; a[2] = a2; a[0] = a0;
}

unsigned char generate_random() {
    return rand() % 256;
}

void gen_axis_40(volatile unsigned char *buffer) {
    for (int i = 0; i < FINN_INPUT; ++i) {
        buffer[i] = generate_random();
    }
}

 int main ()
 {
	/* Normal FIFO Test variables*/
    volatile unsigned char outbuffer[BUFFER_SIZE] = {
       0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf
    };
    volatile unsigned char inbuffer[BUFFER_SIZE];
    volatile unsigned char inbuffer_finn[FINN_OUTPUT];
    volatile uint32_t inbuffer_finn_u32[FINN_OUTPUT];
    volatile float inbuffer_finn_float[FINN_OUTPUT];
    volatile uint32_t inbuffer_finn_u32_8[FINN_OUTPUT*2];
    volatile uint32_t inbuffer_finn_u32_1[1];

    volatile int32_t inbuffer_finn_i32[FINN_OUTPUT];


    unsigned char buf2;




//	/* FINN FIFO Test variables*/
    volatile int8_t outbuffer_finn0[FINN_INPUT] = {
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

//    volatile unsigned char outbuffer_finn[FINN_INPUT] = {
//       0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
//       0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
//       0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
//       0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
//    };

    //Fuzzy attack
//    volatile unsigned char outbuffer_finn[FINN_INPUT] = {
//       0x03, 0xb0, 0x63, 0x7f, 0xfa, 0xf4, 0x0d, 0xa7, 0x07, 0x1f,
//       0x03, 0x99, 0xad, 0x3e, 0x09, 0xd9, 0x91, 0x03, 0xb9, 0x33,
//       0x13, 0x33, 0x7e, 0x4c, 0x67, 0xf0, 0x48, 0xef, 0x83, 0xd8,
//       0x02, 0xc0, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
//    };
    // datalength, ID, ID, Payload
    //Output

    volatile int8_t outbuffer_finn[FINN_INPUT] = {
        0x3C, 0xA8, 0x35, 0xE5, 0x8F, 0x2A, 0xCD, 0xC2, 0x40, 0xC1,
        0xCF, 0x52, 0x71, 0x6A, 0x72, 0x29, 0x23, 0xB0, 0x5B, 0x1B,
        0xA3, 0x2A, 0x82, 0x88, 0x44, 0x19, 0x0E, 0x30, 0xF2, 0x6B,
        0xA3, 0xAE, 0x0F, 0x84, 0xCD, 0x49, 0xD6, 0x83, 0x42, 0x17
    };

    unsigned char buf3;

    device_init();

    while (1) {
    	/*Normal FIFO Test*/
         write_axis(outbuffer);
         read_axis(inbuffer);
         buf2 = inbuffer[2];
         outbuffer[2]++;
         printf("%d", buf2);

        /*FINN FIFO Test*/
         write_axis_40(outbuffer_finn);
         //read_axis_4_u32(inbuffer_finn_u32);
         read_axis_4_i32(inbuffer_finn_i32);
         write_axis_40(outbuffer_finn0);
         //read_axis_4_u32(inbuffer_finn_u32);
         read_axis_4_i32(inbuffer_finn_i32);
         //read_axis_4_float(inbuffer_finn_float);
         //read_axis_8_u32(inbuffer_finn_u32_8);
		 //read_axis_4(inbuffer_finn);
         //buf3 = inbuffer_finn[2];
         //gen_axis_40(outbuffer_finn);
         //outbuffer_finn[2]++;
         //printf("%d", buf3);

     }

    //test output length
//    write_axis_40(outbuffer_finn);
//    while(1){
//    	read_axis_1_u32(inbuffer_finn_u32_1);
//    }


    return 0;
 }


